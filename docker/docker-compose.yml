version: '3.7'


volumes:
  postgres_data_keycloak:
    driver: local
  postgres_data_workflow:
    driver: local
  postgres_data_refdata:
    driver: local
  mongo_data:
    driver: local
  postgres_data_operational:
    driver: local

services:

  traefik:
    image: traefik
    restart: on-failure
    container_name: traefik
    hostname: traefik
    domainname: ${DOMAINNAME}
    command: "${TRAEFIK_COMMAND}"
    environment:
      - TZ
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_HOSTED_ZONE_ID
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PWD}/proxy/${SCHEME}.toml:/traefik.toml
      - ${PWD}/proxy/acme:/etc/traefik/acme
    ports:
      - "8080:8080"
      - "443:443"
      - "80:80"
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.backend=traefik"
      - "traefik.frontend.rule=Host:traefik.${DOMAINNAME}"
      - "traefik.port=8080"
      - "traefik.docker.network=web"
      - "traefik.frontend.headers.SSLRedirect=false"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost=${DOMAINNAME}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"

  ttyd:
    image: hackinglab/hl-kali-docker-ttyd
    restart: on-failure
    container_name: ttyd
    networks:
      - web
    labels:
      - "traefik.port=7681"
      - "traefik.frontend.rule=Host:ttyd.${DOMAINNAME}"
      - "traefik.protocol=http"
      - "traefik.enable=true"

  postgres_keycloak:
    image: postgres:10-alpine
    restart: on-failure
    container_name: postgres_keycloak
    volumes:
      - postgres_data_keycloak:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - db
    labels:
      - "traefik.enable=false"

  keycloak:
    image: jboss/keycloak:master
    restart: on-failure
    container_name: keycloak
    environment:
      - DB_VENDOR=POSTGRES
      - DB_ADDR=postgres_keycloak
      - DB_DATABASE=keycloak
      - DB_USER=keycloak
      - DB_PASSWORD=password
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=secret
      - KEYCLOAK_IMPORT=/tmp/realm.json
      - KEYCLOAK_LOGLEVEL=INFO
      - PROXY_ADDRESS_FORWARDING=true
    volumes:
      - ${PWD}/keycloak/dev/dev-realm.json:/tmp/realm.json
    depends_on:
      - postgres_keycloak
    networks:
      - web
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:keycloak.${DOMAINNAME}"
      - "traefik.port=8443"
      - "traefik.protocol=https"
      - "traefik.docker.network=web"
    command: ["-b", "0.0.0.0", "-Dkeycloak.profile.feature.docker=enabled"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/auth/"]
      interval: 5s
      timeout: 2s
      retries: 15
      start_period: 30s

  postgres_workflow:
    image: postgres:10-alpine
    restart: on-failure
    container_name: postgres_workflow
    volumes:
      - postgres_data_workflow:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: workflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: workflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - db
    labels:
      - "traefik.enable=false"

  redis:
    image: redis:5-alpine
    container_name: redis
    networks:
      - db
    labels:
      - "traefik.enable=false"

  workflow:
    image: quay.io/ukhomeofficedigital/cop-private-workflow-engine:${WORKFLOW_IMAGE}
    restart: on-failure
    container_name: workflow
    environment:
      JAVA_OPTS: "-XX:PermSize=4096m -Djavax.net.debug=true"
      ENGINE_DB_DRIVER: org.postgresql.Driver
      CAMUNDA_DB_TYPE: postgres
      KEYCLOAK_REALM: dev
      KEYCLOAK_AUTH_URL: "${SCHEME}://keycloak.${DOMAINNAME}/auth"
      KEYCLOAK_AUTH_SECRET: "a0a3fe49-3189-40d8-a67f-10673a1900e9"
      KEYCLOAK_CLIENT_ID: workflow
      SPRING_PROFILES_ACTIVE: local
      ENGINE_DB_URL: "jdbc:postgresql://postgres_workflow:5432/workflow"
      ENGINE_DB_USERNAME: postgres
      ENGINE_DB_PASSWORD: workflow
      REF_DATA_ENDPOINT_URL: "${SCHEME}://data-api.${DOMAINNAME}"
      PLATFORM_DATA_ENDPOINT_URL: "${SCHEME}://postgrest_operational.${DOMAINNAME}"
      PRIVATE_UI_URL: "${SCHEME}://private-ui.${DOMAINNAME}"
      PUBLIC_UI_PROTOCOL: "http://"
      PUBLIC_UI_TXT_PROTOCOL: "tel://"
      PRIVATE_REDIS_URL: redis
      PRIVATE_REDIS_PORT: 6379
      PRIVATE_REDIS_TOKEN: null
      GOV_NOTIFY_CLIENT_ID: "NOTREQUIRED"
      GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE_ID: "NOTREQUIRED"
      GOV_NOTIFY_NOTIFICATION_SMS_TEMPLATE_ID: "NOTREQUIRED"
    volumes:
      - ${PRIVATE_WORKFLOW_RESOURCES}:/workflow-resources
    depends_on:
      - postgres_workflow
      - redis
      - keycloak
    networks:
      - web
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:workflow.${DOMAINNAME}"
      - "traefik.port=8080"
      - "traefik.protocol=http"
      - "traefik.docker.network=web"

  postgres_refdata:
    image: postgres:10-alpine
    restart: on-failure
    container_name: postgres_refdata
    volumes:
      - postgres_data_refdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - 5433:5432
    networks:
      - db
    labels:
      - "traefik.enable=false"

  public_refdata_flyway:
    image: quay.io/ukhomeofficedigital/refdata:latest
    container_name: public_refdata_flyway
    command: /mnt/docker/run.sh
    working_dir: /mnt
    environment:
      POSTGRES_DB: postgres
      POSTGRES_SERVER: postgres_refdata
      POSTGRES_PORT: 5432
      FLYWAY_INIT_USER: postgres
      FLYWAY_INIT_PASSWORD: mysecretpassword
      FLYWAY_PLACEHOLDERS_REFERENCE_DB_NAME: reference
      FLYWAY_PLACEHOLDERS_REFERENCE_OWNER_NAME: ownerreference
      FLYWAY_PLACEHOLDERS_REFERENCE_OWNER_PASSWORD: mysecretpassword
      FLYWAY_PLACEHOLDERS_REFERENCE_SCHEMA: reference
      FLYWAY_PLACEHOLDERS_GOVERNANCE_OWNER_NAME: ownergovernance
      FLYWAY_PLACEHOLDERS_GOVERNANCE_OWNER_PASSWORD: mysecretpassword
      FLYWAY_PLACEHOLDERS_GOVERNANCE_SCHEMA: governance
      FLYWAY_PLACEHOLDERS_REFERENCE_AUTHENTICATOR_USER: authenticatorreference
      FLYWAY_PLACEHOLDERS_REFERENCE_AUTHENTICATOR_PASSWORD: auth1234
      FLYWAY_PLACEHOLDERS_REFERENCE_ANON_USER: webanon
      FLYWAY_PLACEHOLDERS_REFERENCE_SERVICE_USER: servicereference
      FLYWAY_PLACEHOLDERS_REFERENCE_READONLY_USER: readonlyreference
      FLYWAY_PLACEHOLDERS_GOVERNANCE_AUTHENTICATOR_USER: authenticatorgovernance
      FLYWAY_PLACEHOLDERS_GOVERNANCE_AUTHENTICATOR_PASSWORD: auth1234
      FLYWAY_PLACEHOLDERS_GOVERNANCE_ANON_USER: webanongovernance
      FLYWAY_PLACEHOLDERS_GOVERNANCE_SERVICE_USER: servicegovernance
      FLYWAY_PLACEHOLDERS_GOVERNANCE_READONLY_USER: readonlygovernance
    volumes:
      - ${PUBLIC_REFDATA_FLYWAY}:/mnt
    depends_on:
      - postgres_refdata
    networks:
      - db
    labels:
      - "traefik.enable=false"

  private_refdata_flyway:
    image: quay.io/ukhomeofficedigital/refdata:latest
    container_name: private_refdata_flyway
    command: /mnt/docker/run.sh
    working_dir: /mnt
    environment:
      POSTGRES_DB: postgres
      POSTGRES_SERVER: postgres_refdata
      POSTGRES_PORT: 5432
      FLYWAY_INIT_USER: postgres
      FLYWAY_INIT_PASSWORD: mysecretpassword
      FLYWAY_PLACEHOLDERS_REFERENCE_DB_NAME: reference
      FLYWAY_PLACEHOLDERS_REFERENCE_OWNER_NAME: ownerreference
      FLYWAY_PLACEHOLDERS_REFERENCE_OWNER_PASSWORD: mysecretpassword
      FLYWAY_PLACEHOLDERS_REFERENCE_SCHEMA: reference
      FLYWAY_PLACEHOLDERS_REFERENCE_AUTHENTICATOR_USER: authenticatorreference
      FLYWAY_PLACEHOLDERS_REFERENCE_AUTHENTICATOR_PASSWORD: auth1234
      FLYWAY_PLACEHOLDERS_REFERENCE_ANON_USER: webanon
      FLYWAY_PLACEHOLDERS_REFERENCE_SERVICE_USER: servicereference
      FLYWAY_PLACEHOLDERS_REFERENCE_READONLY_USER: readonlyreference
    volumes:
      - ${PRIVATE_REFDATA_FLYWAY}:/mnt
    depends_on:
      - postgres_refdata
      - public_refdata_flyway
    networks:
      - db
    labels:
      - "traefik.enable=false"

  reporting:
    image: quay.io/ukhomeofficedigital/cop-private-reporting-service:${REPORTING_IMAGE}
    restart: on-failure
    container_name: reporting
    environment:
      PLATFORM_DATA_PROXY_URL: "${SCHEME}://postgrest_operational.${DOMAINNAME}/"
      REPORTING_SERVICE_NAME: "reporting"
      DOMAIN: "${DOMAINNAME}"
      SESSION_NAME: dev
      PRIVATE_REDIS_URL: redis
      PRIVATE_REDIS_PORT: 6379
      PRIVATE_REDIS_TOKEN: ""
      SESSION_SECRET: reports
      KEYCLOAK_REALM: dev
      KEYCLOAK_AUTH_URL: "${SCHEME}://keycloak.${DOMAINNAME}/auth"
      KEYCLOAK_CLIENT_ID: reporting
    volumes:
      - ${REPORTING_DATA}:/workflow-resources
    networks:
      - web
    depends_on:
      - keycloak
      - postgrest_operational
#      - data-api
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:reporting.${DOMAINNAME}"
      - "traefik.port=8080"
      - "traefik.protocol=http"
      - "traefik.docker.network=web"

  private_ui:
    image: quay.io/ukhomeofficedigital/cop-private-workflow-tasklist:${PRIVATE_UI_IMAGE}
    restart: on-failure
    container_name: private_ui
    environment:
      UI_ENVIRONMENT: "LOCAL"
      UI_VERSION: "ALPHA"
      AUTH_REALM: "dev"
      AUTH_URL: "${SCHEME}://keycloak.${DOMAINNAME}/auth"
      AUTH_CLIENT_ID: "platform-ui"
      AUTH_ACCESS_ROLE: "platform"
      PROTOCOL: "${SCHEME}"
      EXT_DOMAIN: "${DOMAINNAME}"
      FORMIO_SERVER_NAME: formio
      OPERATIONAL_POSTGREST_NAME: postgrest_operational
      REPORTING_SERVER_NAME: reporting
      TRANSLATION_SERVER_NAME: translation
      WORKFLOW_SERVER_NAME: workflow
      TRANSLATION_SERVICE_URL: ${SCHEME}://translation.${DOMAINNAME}
      OPERATIONAL_DATA_URL: ${SCHEME}://postgrest_operational.${DOMAINNAME}
      FORM_SERVICE_URL: ${SCHEME}://formio.${DOMAINNAME}
      WORKFLOW_SERVICE_URL: ${SCHEME}://workflow.${DOMAINNAME}

    volumes:
      - ${PWD}/platform/ca-bundle.crt:/etc/ssl/certs/ca-bundle.crt
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:private-ui.${DOMAINNAME}"
      - "traefik.port=8080"
      - "traefik.protocol=http"
      - "traefik.docker.network=web"

  data-api:
    image: quay.io/ukhomeofficedigital/reference-data-api-service:${DATA_API_IMAGE}
    restart: on-failure
    container_name: data_api
    environment:
      DB_CONNECTION_STRING: postgres://authenticatorreference:auth1234@postgres_refdata:5432/reference
      LOG_LEVEL: DEBUG
    networks:
      - web
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:data-api.${DOMAINNAME}"
      - "traefik.port=5000"
      - "traefik.protocol=http"
      - "traefik.docker.network=web"

  data-ui:
    image: quay.io/ukhomeofficedigital/ref-data-gov-tool:${DATA_UI_IMAGE}
    restart: on-failure
    container_name: data_ui
    environment:
      KEYCLOAK_AUTH_URL: "${SCHEME}://keycloak.${DOMAINNAME}/auth"
      KEYCLOAK_CLIENT_ID: "refdata-ui"
      KEYCLOAK_REALM: "dev"
    networks:
      - web
    depends_on:
      - data-api
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:data-ui.${DOMAINNAME}"
      - "traefik.port=8080"
      - "traefik.protocol=http"
      - "traefik.docker.network=web"

  mongo:
    image: mongo:latest
    restart: on-failure
    container_name: mongo
    entrypoint:
      - /usr/bin/mongod
      - --config
      - /config/mongod.conf
    volumes:
      - ${PWD}/mongo/mongod.conf:/config/mongod.conf
      - mongo_data:/data
    networks:
      - db
    labels:
      - "traefik.enable=false"

  formio:
    image: quay.io/digitalpatterns/formio:latest
    restart: on-failure
    container_name: formio
    environment:
      FORMIO_DOMAIN: "${SCHEME}://formio.${DOMAINNAME}"
      FORMIO_ROOT_EMAIL: "me@lodev.xyz"
      FORMIO_ROOT_PASSWORD: "secret"
    depends_on:
      - mongo
    networks:
      - web
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:formio.${DOMAINNAME}"
      - "traefik.port=3001"
      - "traefik.protocol=http"
      - "traefik.docker.network=web"

  formbuilder:
    image: digitalpatterns/form-builder:latest
    restart: on-failure
    container_name: formbuilder
    environment:
      PORT: "8080"
    depends_on:
      - formio
    networks:
      - web
      - db
    volumes:
      - ${PWD}/formbuilder/appConfig.json:/config/appConfig.json
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:formbuilder.${DOMAINNAME}"
      - "traefik.port=8080"
      - "traefik.protocol=http"
      - "traefik.docker.network=web"

  translation:
    image: quay.io/ukhomeofficedigital/cop-private-translation-service:${TRANSLATION_IMAGE}
    restart: on-failure
    container_name: translation
    environment:
      FORM_URL: "${SCHEME}://formio.${DOMAINNAME}"
      PLATFORM_DATA_URL: "${SCHEME}://postgrest_operational.${DOMAINNAME}"
      WORKFLOW_URL: "${SCHEME}://workflow.${DOMAINNAME}"
      AUTH_CLIENT_ID: "translation"
      AUTH_REALM: "dev"
      AUTH_URL: "${SCHEME}://keycloak.${DOMAINNAME}/auth"
      PROTOCOL: "${SCHEME}://"
      INT_DOMAIN: "${DOMAINNAME}"
      FORMIO_SERVER_NAME: formio
      OPERATIONAL_POSTGREST_NAME: postgrest_operational
      REPORTING_SERVER_NAME: reporting
      TRANSLATION_SERVER_NAME: translation
      WORKFLOW_SERVER_NAME: workflow
      PRIVATE_UI_NAME: private-ui
      PRIVATE_FORM_NAME: formio
      EXT_DOMAIN: ${DOMAINNAME}
    volumes:
      - ${PWD}/platform/ca-bundle.crt:/etc/ssl/certs/ca-bundle.crt
      - ${PWD}/platform/mobileid-key.pem:/enccerts/mobileid-key.pem
    depends_on:
      - keycloak
#      - data-api
      - workflow
      - formio
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:translation.${DOMAINNAME}"
      - "traefik.port=8080"
      - "traefik.protocol=http"
      - "traefik.docker.network=web"
      - "traefik.frontend.headers.customRequestHeaders=nginxId: NoCorrelationId"

  postgres_operational:
    image: postgres:10-alpine
    restart: on-failure
    container_name: postgres_operational
    volumes:
      - postgres_data_operational:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
    networks:
      - db
    ports:
      - 5434:5432

  operational_flyway:
    image: quay.io/ukhomeofficedigital/refdata:latest
    container_name: operational_flyway
    command: /mnt/docker/run.sh
    working_dir: /mnt
    environment:
      PGPASSWORD: mysecretpassword
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_SERVER: postgres_operational
      POSTGRES_PORT: 5432
    volumes:
      - ${PRIVATE_OPERATIONAL_FLYWAY}:/mnt
    depends_on:
      - postgres_operational
    networks:
      - db
    labels:
      - "traefik.enable=false"

  postgrest_operational:
    image: quay.io/ukhomeofficedigital/postgrest
    restart: on-failure
    container_name: postgrest_operational
    environment:
      PGRST_DB_URI: "postgres://authenticatoroperation:auth1234@postgres_operational:5432/operation"
      PGRST_DB_ANON_ROLE: web_anon
      PGRST_SECRET_IS_BASE64: "false"
      PGRST_JWT_AUD: postgrest-operational
      PGRST_ROLE_CLAIM_KEY: .oppdbrole
      PGRST_DB_SCHEMA: operation
      PGRST_SERVER_PROXY_URI: "http://localhost:3000/"
      KEYCLOAK_URL: "${SCHEME}://keycloak.${DOMAINNAME}"
      KEYCLOAK_REALM: dev
    command: /usr/local/bin/getKeycloakKey.sh
    depends_on:
      - postgres_operational
      - operational_flyway
      - keycloak
    networks:
      - web
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:postgrest_operational.${DOMAINNAME}"
      - "traefik.port=3000"
      - "traefik.protocol=http"
      - "traefik.docker.network=web"

  camunda_admin:
    image: digitalpatterns/camunda-tools:latest
    restart: on-failure
    container_name: caumnda_admin
    environment:
      JAVA_OPTS: "-Djavax.net.debug=true -Dserver.tomcat.access-log-enabled=false -Dserver.tomcat.accesslog.directory=/tmp -Dserver.tomcat.accesslog.pattern=common"
      ENGINE_DB_DRIVER: org.postgresql.Driver
      DATABASE_TYPE: postgres
      KEYCLOAK_REALM: dev
      KEYCLOAK_AUTH_URL: "${SCHEME}://keycloak.${DOMAINNAME}/auth"
      KEYCLOAK_CLIENT_ID: "camunda-ui"
      KEYCLOAK_AUTH_ADMIN_CLIENT_ID: camunda-admin-client
      KEYCLOAK_AUTH_ADMIN_CLIENT_SECRET: 43ab4b22-60c3-4f6c-90bd-925cfd75407a
      KEYCLOAK_ADMIN_USERNAME: "camunda-admin-user"
      KEYCLOAK_ADMIN_PASSWORD: "secret"
      COCKPIT_ALLOWED_ROLES: "camunda-admins"
      PROCESS_ENGINE_NAME: "cop"
      ASYNC_EVENT_LOGGING: "true"
      BANNER_MODE: "console"
      ENGINE_DB_URL: "jdbc:postgresql://postgres_workflow:5432/workflow"
      ENGINE_DB_USERNAME: postgres
      ENGINE_DB_PASSWORD: workflow
    depends_on:
      - postgres_operational
      - operational_flyway
      - keycloak
    networks:
      - web
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:camunda-admin.${DOMAINNAME}"
      - "traefik.port=8080"
      - "traefik.protocol=http"
      - "traefik.docker.network=web"

#  vault:
#    build: vault/
#    restart: on-failure
#    container_name: vault
#    volumes:
#      - ${PWD}/vault/config:/vault/config
#      - ${PWD}/vault/policies:/vault/policies
#      - ${PWD}/vault/data:/vault/data
#      - ${PWD}/vault/logs:/vault/logs
#    environment:
#      VAULT_ADDR: "${SCHEME}://vault.${DOMAINNAME}"
#    command: server -config=/vault/config/vault-config.json
#    cap_add:
#      - IPC_LOCK
#    networks:
#      - web
#      - db
#    labels:
#      - "traefik.enable=true"
#      - "traefik.frontend.rule=Host:vault.${DOMAINNAME}"
#      - "traefik.port=8200"
#      - "traefik.protocol=http"
#      - "traefik.docker.network=web"


networks:
  db:
    external:
      name: db
  web:
    external:
      name: web
